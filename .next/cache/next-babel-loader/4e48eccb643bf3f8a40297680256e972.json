{"ast":null,"code":"var _jsxFileName = \"/Users/brandongottshall/GDrive/dogPark/components/shared/ProjectGrid.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nexport default function ProjectGrid(_ref) {\n  var _this = this;\n\n  var data = _ref.data,\n      type = _ref.type;\n\n  //type can be used to switch update/news\n  var iconSelector = function iconSelector(rand) {\n    var icons = [];\n  };\n\n  var projectsData = data || Array(20).fill({\n    name: 'Project Id',\n    icon: iconSelector(Math.floor(Math.random() * 12))\n  });\n  var cards = projectsData.map(function (data, i) {\n    return __jsx(ProjectSquare, {\n      data: data,\n      id: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 49\n      }\n    });\n  });\n  var grid = \"w-screen overflow-x-scroll grid grid-rows-2 grid-cols-\".concat(feedData.length / 2, \" col-gap-0 no-scrollbar justify-between no-wrap\");\n  return __jsx(\"div\", {\n    style: {\n      gridTemplateColumns: \"repeat(\".concat(feedData.length / 2, \", 350px)\")\n    },\n    className: grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, cards);\n}\n_c = ProjectGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectGrid\");","map":{"version":3,"sources":["/Users/brandongottshall/GDrive/dogPark/components/shared/ProjectGrid.jsx"],"names":["ProjectGrid","data","type","iconSelector","rand","icons","projectsData","Array","fill","name","icon","Math","floor","random","cards","map","i","grid","feedData","length","gridTemplateColumns"],"mappings":";;;AACA,eAAe,SAASA,WAAT,OAAmC;AAAA;;AAAA,MAAbC,IAAa,QAAbA,IAAa;AAAA,MAAPC,IAAO,QAAPA,IAAO;;AAAE;AAChD,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AACzB,QAAMC,KAAK,GAAG,EAAd;AACH,GAFD;;AAGA,MAAMC,YAAY,GAAGL,IAAI,IAAIM,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe;AACxCC,IAAAA,IAAI,EAAE,YADkC;AAExCC,IAAAA,IAAI,EAAEP,YAAY,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD;AAFsB,GAAf,CAA7B;AAIA,MAAMC,KAAK,GAAGR,YAAY,CAACS,GAAb,CAAiB,UAACd,IAAD,EAAOe,CAAP;AAAA,WAAa,MAAC,aAAD;AAAe,MAAA,IAAI,EAAEf,IAArB;AAA2B,MAAA,EAAE,EAAEe,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAAA,GAAjB,CAAd;AACA,MAAMC,IAAI,mEAA4DC,QAAQ,CAACC,MAAT,GAAgB,CAA5E,oDAAV;AACA,SACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,mBAAmB,mBAAYF,QAAQ,CAACC,MAAT,GAAgB,CAA5B;AAApB,KAAZ;AAA0E,IAAA,SAAS,EAAEF,IAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KADL,CADJ;AAKH;KAfuBd,W","sourcesContent":["\nexport default function ProjectGrid({data, type}) { //type can be used to switch update/news\n    const iconSelector = rand => {\n        const icons = [ ]\n    }\n    const projectsData = data || Array(20).fill({\n        name: 'Project Id',\n        icon: iconSelector(Math.floor(Math.random()*12))\n    })\n    const cards = projectsData.map((data, i) => <ProjectSquare data={data} id={i}/>)\n    const grid = `w-screen overflow-x-scroll grid grid-rows-2 grid-cols-${feedData.length/2} col-gap-0 no-scrollbar justify-between no-wrap`\n    return(\n        <div style={{gridTemplateColumns: `repeat(${feedData.length/2}, 350px)`}} className={grid}>\n            {cards}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}